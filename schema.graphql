type Block @entity {
  id: ID!
  number: BigInt!
  timestamp: BigInt!

  # derive from
  transactions: [Transaction!]! @derivedFrom(field: "block")
}

type Transaction @entity {
  id: ID!
  codespace: String!

  # derive from
  block: Block!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type Event @entity {
  id: ID!
  type: String!

  # derive from
  block: Block!
  transaction: Transaction!
  attributes: [Attribute!]! @derivedFrom(field: "event")
}

type Attribute @entity {
  id: ID!
  key: String!
  value: String!

  # derive from
  block: Block!
  transaction: Transaction!
  event: Event!
}

type Proposal @entity {
  id: ID!
  txHash: String!
  blockNumber: BigInt!
  type: String!
  proposer: String!
  initialDepositDenom: String!
  initialDepositAmount: String!
  authority: String!
  title: String!
  description: String!
  metadata: String!
  votes: [ProposalVote!]! @derivedFrom(field: "proposal")
  softwareUpgrades: [SoftwareUpgradeProposal!]! @derivedFrom(field: "proposal")
}

type SoftwareUpgradeProposal @entity {
  id: ID!
  planName: String!
  planHeight: BigInt!
  planInfo: String!
  proposal: Proposal!
}

type ProposalVote @entity {
  id: ID!
  txHash: String!
  blockNumber: BigInt!
  voter: String!
  option: String!
  weight: BigDecimal!
  proposal: Proposal!
}
