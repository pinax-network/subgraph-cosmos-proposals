type Block @entity {
  id: ID!
  number: BigInt!
  timestamp: BigInt!
  date: String!
}

type Transaction @entity {
  id: ID!
  code: BigInt!
  codespace: String!
  gas_used: BigInt!
  gas_wanted: BigInt!
  info: String!
  log: String!
  auth_info: String
  signatures: String
  # derive from
  block: Block!
}

type Proposal @entity {
  id: ID!

  # message
  type: String!
  authority: String!

  # proposal metadata
  proposer: String!
  title: String!
  summary: String!
  metadata: String
  proposal_type: ProposalType!

  # timestamp
  submit_time: Timestamp!
  deposit_end_time: Timestamp
  voting_start_time: Timestamp
  voting_end_time: Timestamp

  # proposal state
  status: ProposalStatus!

  # derive from
  block: Block!
  transaction: Transaction!
  votes: [Vote!]! @derivedFrom(field: "proposal")
  deposits: [Deposit!]! @derivedFrom(field: "proposal")
  messages: [ProposalMessage!]! @derivedFrom(field: "proposal")
}

type ProposalMessage @entity {
  id: ID!
  message_index: BigInt! # the message's index in the "messages" proposal field
  type: String! # the message type (e.g "/cosmwasm.wasm.v1.MsgStoreCode")
  raw_data: String! # undecoded message value in Hex
  json_data: String # decoded JSON value
  proposal: Proposal!
}

enum ProposalStatus {
  VotingPeriod
  DepositPeriod
  Passed
  Rejected
  Failed
  Canceled
  Dropped
}

enum ProposalType {
  Unspecified
  Standard
  MultipleChoice
  Optimistic
  Expedited
}

type Vote @entity {
  id: ID!

  # vote
  voter: String!
  option: String!
  weight: BigDecimal!

  # derive from
  block: Block!
  transaction: Transaction!
  proposal: Proposal!
}

type Deposit @entity {
  id: ID!

  # deposit
  amount: String!
  denom: String!
  depositor: String!

  # derive from
  block: Block!
  transaction: Transaction!
  proposal: Proposal!
}

type GovernanceParameters @entity {
  id: ID!

  # governance parameters
  deposit_params: DepositParams! @derivedFrom(field: "governance_parameters")
  voting_params: VotingParams! @derivedFrom(field: "governance_parameters")
  tally_params: TallyParams! @derivedFrom(field: "governance_parameters")

  # derive from
  block: Block!
}

type DepositParams @entity {
  id: ID!

  # deposit parameters
  min_deposit: [MinDeposit!]! @derivedFrom(field: "deposit_params")
  max_deposit_period: String!

  # derive from
  block: Block!
  governance_parameters: GovernanceParameters!
}

type MinDeposit @entity {
  id: ID!

  # min deposit
  amount: BigInt!
  denom: String!

  # derive from
  block: Block!
  deposit_params: DepositParams!
}

type VotingParams @entity {
  id: ID!

  # voting parameters
  voting_period: String!

  # derive from
  block: Block!
  governance_parameters: GovernanceParameters!
}

type TallyParams @entity {
  id: ID!

  # tally parameters
  quorum: BigDecimal!
  threshold: BigDecimal!
  veto_threshold: BigDecimal!

  # derive from
  block: Block!
  governance_parameters: GovernanceParameters!
}

type SoftwareUpgradeProposal @entity {
  id: ID!
  name: String!
  height: BigInt!
  info: String!
  proposal: Proposal!
}

type CommunityPoolSpend @entity {
  id: ID!
  authority: String!
  recipient: String!
  amount: BigInt!
  denom: String!
  proposal: Proposal!
}

type ClientUpdate @entity {
  id: ID!
  subject_client_id: String!
  substitute_client_id: String!
  proposal: Proposal!
}

type ParameterChange @entity {
  id: ID!
  subspace: String!
  key: String!
  value: String!
  proposal: Proposal!
}

#type VoteStats @aggregation(intervals: ["hour", "day"], source: "Vote") {
# id: ID!
#  timestamp: Timestamp!
#  proposal: Proposal!
#
#  # Aggregates
#  yesCount: BigInt!
#    @aggregate(fn: "count", arg: "case when option =  'Yes' then 1 else 0 end")
#  noCount: BigInt!
#    @aggregate(fn: "count", arg: "case when option =  'No' then 1 else 0 end")
#  abstainCount: BigInt!
#    @aggregate(
#      fn: "count"
#      arg: "case when option =  'Abstain' then 1 else 0 end"
#    )
#  noWithVetoCount: BigInt!
#   @aggregate(
#    fn: "count"
#      arg: "case when option =  'NoWithVeto' then 1 else 0 end"
#    )
#}
