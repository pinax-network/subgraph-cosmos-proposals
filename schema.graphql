type Block @entity {
  id: ID!
  number: BigInt!
  timestamp: Timestamp!
}

type Transaction @entity {
  id: ID!
  codespace: String!

  # derive from
  block: Block!
  events: [Event!]! @derivedFrom(field: "transaction")
}

type Event @entity {
  id: ID!
  type: String!

  # derive from
  block: Block!
  transaction: Transaction!
  attributes: [Attribute!]! @derivedFrom(field: "event")
}

type Attribute @entity {
  id: ID!
  key: String!
  value: String!

  # derive from
  block: Block!
  transaction: Transaction!
  event: Event!
}

type Proposal @entity {
  id: ID!
  block: Block!
  txHash: String!
  type: String!
  proposer: String!
  initialDepositDenom: String!
  initialDepositAmount: String!
  authority: String!
  title: String!
  description: String!
  metadata: String
  votes: [Vote!]! @derivedFrom(field: "proposal")
  contents: [Content!]! @derivedFrom(field: "proposal")
}

type Content @entity {
  id: ID!
  typeUrl: String!
  jsonData: String
  value: String
  proposal: Proposal!
}

type SoftwareUpgradeProposal @entity {
  id: ID!
  planName: String!
  planHeight: BigInt!
  planInfo: String!
  proposal: Proposal!
}

type Vote @entity {
  id: ID!
  txHash: String!
  block: Block!
  voter: String!
  option: String!
  weight: BigDecimal!
  proposal: Proposal!
}

#type VoteStats @aggregation(intervals: ["hour", "day"], source: "Vote") {
# id: ID!
#  timestamp: Timestamp!
#  proposal: Proposal!
#
#  # Aggregates
#  yesCount: BigInt!
#    @aggregate(fn: "count", arg: "case when option =  'Yes' then 1 else 0 end")
#  noCount: BigInt!
#    @aggregate(fn: "count", arg: "case when option =  'No' then 1 else 0 end")
#  abstainCount: BigInt!
#    @aggregate(
#      fn: "count"
#      arg: "case when option =  'Abstain' then 1 else 0 end"
#    )
#  noWithVetoCount: BigInt!
#   @aggregate(
#    fn: "count"
#      arg: "case when option =  'NoWithVeto' then 1 else 0 end"
#    )
#}
