# requires substreams v1.7.1 and above
specVersion: v0.1.0
package:
  name: injective_common
  version: v0.2.3
  url: https://github.com/streamingfast/substreams-foundational-modules/injective-common
  doc: |
    common Injective substreams modules to extract events and transactions with indexing

    Use one of those optimized modules with a query string as a parameter:
    * filtered_events
    * filtered_event_groups

    The query string will be used for the blockfilter as well as the actual filtering of the events/transactions

    The following modules are also available for more specific filtering, but they do not use an index by default:
    * filtered_events_by_attribute_value
    * filtered_event_groups_by_attribute_value

    They should be overriden by setting the blockFilter.Query.String parameter to a query that matches the event type 
    and attribute keys only. See `derived-substreams-example.yaml` for an example 
    (https://github.com/streamingfast/substreams-foundational-modules/injective-common)

network: injective-mainnet

protobuf:
  descriptorSets:
  - localPath: generated-buf-build.binpb

binaries:
  default:
    type: wasm/rust-v1
    file: target/wasm32-unknown-unknown/release/injective_common.wasm

modules:
  - name: all_events
    kind: map
    initialBlock: 0
    inputs:
      - source: sf.cosmos.type.v2.Block
    output:
      type: proto:sf.substreams.cosmos.v1.EventList
    doc: |
      `all_events` reads from the `sf.cosmos.type.v2.Block` source and outputs a list of all events in the block.
      Some events are at the block level, others appear inside the transactions.

  - name: index_events
    kind: blockIndex
    inputs:
      - map: all_events
    output:
      type: proto:sf.substreams.index.v1.Keys
    doc: |
      `index_events` sets the keys corresponding to all event 'types' and 'attribute keys' in the block
      ex: `type:coin_received`, `type:injective.peggy.v1.EventDepositClaim`, `attr:action`, `attr:sender` ...
      The attribute values are never indexed because they have a high cardinality and would be too expensive to index.

  - name: filtered_events
    kind: map
    blockFilter:
      module: index_events
      query:
        params: true
    inputs:
      - params: string
      - map: all_events
    output:
      type: proto:sf.substreams.cosmos.v1.EventList
    doc: |
      `filtered_events` reads from `all_events` and applies a filter on the event types and attribute keys, 
      only outputing the events that match the filter. 
      Example usage: `(type:message && attr:action) || (type:wasm && attr:_contract_address)`

  - name: filtered_event_groups
    kind: map
    blockFilter:
      module: index_events
      query:
        params: true
    inputs:
      - params: string
      - map: all_events
    output:
      type: proto:sf.substreams.cosmos.v1.EventList
    doc: |
      `filtered_event_groups` reads from `all_events` and applies a filter on the event types and attribute keys, 
      outputing all the events from transactions that have at least one event matching the filter.
      Example usage: `type:injective.peggy.v1.EventDepositClaim || (type:wasm && attr:_contract_address)`

  - name: filtered_events_by_attribute_value
    kind: map
    inputs:
      - params: string
      - map: all_events
    output:
      type: proto:sf.substreams.cosmos.v1.EventList
    doc: |
      `filtered_events_by_attribute_value` reads from `all_events` and applies a filter on the event types, attribute keys and values,
      only outputing the events that match the filter. 
      Example usage: "type:wasm && attr:_contract_address:inj1v77y5ttah96dc9qkcpc88ad7rce8n88e99t3m5"

      To use this module with an index, import it and override it with the `use:` parameter, setting blockFilter.Query.String to a query
      that matches the event type and attribute keys only (ex: `type:wasm && attr:_contract_address`)

  - name: filtered_event_groups_by_attribute_value
    kind: map
    inputs:
      - params: string
      - map: all_events
    output:
      type: proto:sf.substreams.cosmos.v1.EventList
    doc: |
      `filtered_events_groups_by_attribute_value` reads from `all_events` and applies a filter on the event types, attribute keys and values,
      outputing all the events from transactions that have at least one event matching the filter.
      Example usage: "type:wasm && attr:_contract_address:inj1v77y5ttah96dc9qkcpc88ad7rce8n88e99t3m5"

      To use this module with an index, import it and override it with the `use:` parameter, setting blockFilter.Query.String to a query
      that matches the event type and attribute keys only (ex: `type:wasm && attr:_contract_address`)

params:
  filtered_events: "(type:message && attr:action) || (type:wasm && attr:_contract_address)"
  filtered_event_groups: "type:wasm && attr:_contract_address"
  filtered_events_by_attribute_value: "type:wasm && attr:_contract_address:inj1v77y5ttah96dc9qkcpc88ad7rce8n88e99t3m5"
  filtered_event_groups_by_attribute_value: "type:wasm && attr:_contract_address:inj1v77y5ttah96dc9qkcpc88ad7rce8n88e99t3m5"
