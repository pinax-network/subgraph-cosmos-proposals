# requires substreams v1.7.1 and above
specVersion: v0.1.0
package:
  name: injective_common
  version: v0.2.3
  url: https://github.com/streamingfast/substreams-foundational-modules/injective-common
  doc: |
    common Injective substreams modules to extract events and transactions with indexing

    Use one of those optimized modules with a query string as a parameter:
    * filtered_events
    * filtered_event_groups

    The query string will be used for the blockfilter as well as the actual filtering of the events/transactions

    The following modules are also available for more specific filtering, but they do not use an index by default:
    * filtered_events_by_attribute_value
    * filtered_event_groups_by_attribute_value

    They should be overriden by setting the blockFilter.Query.String parameter to a query that matches the event type 
    and attribute keys only. See `derived-substreams-example.yaml` for an example 
    (https://github.com/streamingfast/substreams-foundational-modules/injective-common)

network: injective-mainnet

protobuf:
  descriptorSets:
    - localPath: generated-buf-build.binpb

imports:
  database_change: https://github.com/streamingfast/substreams-sink-database-changes/releases/download/v1.3.1/substreams-database-change-v1.3.1.spkg
  sql: https://github.com/streamingfast/substreams-sink-sql/releases/download/protodefs-v1.0.7/substreams-sink-sql-protodefs-v1.0.7.spkg

binaries:
  default:
    type: wasm/rust-v1
    file: target/wasm32-unknown-unknown/release/injective_common.wasm

modules:
  - name: ch_out
    kind: map
    initialBlock: 4275388
    inputs:
      - source: sf.substreams.v1.Clock
      - source: sf.cosmos.type.v2.Block
    output:
      type: proto:sf.substreams.sink.database.v1.DatabaseChanges

sink:
  module: ch_out
  type: sf.substreams.sink.sql.v1.Service
  config:
    schema: "./schema.sql"
    engine: clickhouse
    postgraphile_frontend:
      enabled: false
